;license:MIT
;(c) 2017-2025 by qkumba/4am/John Brooks
;
; HGR 2-pixel 'fizzle' transition effect
;

hgr_fx_addrs   = $BD00               ; $100 bytes, page-aligned
hgr_fx_copymasks= $80                ; $80 bytes, should not cross page boundary

HGRFizzle
         jsr   SwapZP
         +COPY_TO_0 hgr_fx_start, hgr_fx_end
         ;X=0
--       ldy   #$20                  ; create copymask table
         ora   #%10000000
-        sta   hgr_fx_copymasks, x
         inx
         dey
         bne   -
         asl
         asl
         bne   --
         tax
         clc
--       ldy   #$20                  ; create address lookup table
         tya
-        sta   hgr_fx_addrs, x
         adc   #1
         inx
         dey
         bne   -
         txa
         bne   --
         jsr   $1
         jmp   SwapZP

hgr_fx_start
!pseudopc 0 {
; in: X,Y=0
         !byte %00000011
@loop    txa
@loop1   eor   #$60                  ; LFSR form 0x6000 with period 32767
         tax                         ; X is LFSR high byte, Y is LFSR low byte
@loop2   lda   hgr_fx_addrs, x       ; which means X is the index into the base address lookup table
         sta   <@dst+2               ; and Y is the offset from the base address
         eor   #$60                  ; which works out well with the available addressing modes
         sta   <@src+2
         lda   (<@dst+1), y
@src     eor   $FD00, y              ; merge source and destination bits
         and   hgr_fx_copymasks, x   ; isolate the bits to replace, zero the rest
         eor   (<@dst+1), y          ; unmerge source and destination bits, leaves 'to keep' destination bits intact
@dst     sta   $FD00, y              ; write the result
         txa
         lsr
         tax
         tya
         ror
         tay
         bcc   @loop2                ; C modified by ror
         bne   @loop                 ; Z modified by tay
         bit   KBD
         bmi   @exit
         txa
         bne   @loop1
         lda   (@src+1), y           ; last lousy byte (because LFSR never hits 0)
         sta   (@dst+1), y
@exit    rts
}
hgr_fx_end
